// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package pbs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserType int32

const (
	UserType_UserType_Omit UserType = 0
	UserType_nomral        UserType = 1
	UserType_admin         UserType = 2
	UserType_superAdmin    UserType = 3
)

var UserType_name = map[int32]string{
	0: "UserType_Omit",
	1: "nomral",
	2: "admin",
	3: "superAdmin",
}

var UserType_value = map[string]int32{
	"UserType_Omit": 0,
	"nomral":        1,
	"admin":         2,
	"superAdmin":    3,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

type LoginUser struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *LoginUser) Reset()         { *m = LoginUser{} }
func (m *LoginUser) String() string { return proto.CompactTextString(m) }
func (*LoginUser) ProtoMessage()    {}
func (*LoginUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *LoginUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginUser.Merge(m, src)
}
func (m *LoginUser) XXX_Size() int {
	return m.Size()
}
func (m *LoginUser) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginUser.DiscardUnknown(m)
}

var xxx_messageInfo_LoginUser proto.InternalMessageInfo

func (m *LoginUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginUser) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type LogoutReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *LogoutReq) Reset()         { *m = LogoutReq{} }
func (m *LogoutReq) String() string { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()    {}
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}
func (m *LogoutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReq.Merge(m, src)
}
func (m *LogoutReq) XXX_Size() int {
	return m.Size()
}
func (m *LogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReq proto.InternalMessageInfo

func (m *LogoutReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type CodeResp struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CodeResp) Reset()         { *m = CodeResp{} }
func (m *CodeResp) String() string { return proto.CompactTextString(m) }
func (*CodeResp) ProtoMessage()    {}
func (*CodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}
func (m *CodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeResp.Merge(m, src)
}
func (m *CodeResp) XXX_Size() int {
	return m.Size()
}
func (m *CodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_CodeResp proto.InternalMessageInfo

func (m *CodeResp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CodeResp) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type CreateUserReq struct {
	UserName  string   `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserFname string   `protobuf:"bytes,2,opt,name=user_fname,json=userFname,proto3" json:"user_fname,omitempty"`
	Mobile    string   `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password  string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	UserType  UserType `protobuf:"varint,5,opt,name=user_type,json=userType,proto3,enum=pbs.UserType" json:"user_type,omitempty"`
	SchoolId  string   `protobuf:"bytes,6,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *CreateUserReq) Reset()         { *m = CreateUserReq{} }
func (m *CreateUserReq) String() string { return proto.CompactTextString(m) }
func (*CreateUserReq) ProtoMessage()    {}
func (*CreateUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}
func (m *CreateUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserReq.Merge(m, src)
}
func (m *CreateUserReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserReq proto.InternalMessageInfo

func (m *CreateUserReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateUserReq) GetUserFname() string {
	if m != nil {
		return m.UserFname
	}
	return ""
}

func (m *CreateUserReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *CreateUserReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserReq) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_UserType_Omit
}

func (m *CreateUserReq) GetSchoolId() string {
	if m != nil {
		return m.SchoolId
	}
	return ""
}

type UpdateUserReq struct {
	UserId    string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName  string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserFname string   `protobuf:"bytes,3,opt,name=user_fname,json=userFname,proto3" json:"user_fname,omitempty"`
	Mobile    string   `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password  string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	UserType  UserType `protobuf:"varint,6,opt,name=user_type,json=userType,proto3,enum=pbs.UserType" json:"user_type,omitempty"`
	SchoolId  string   `protobuf:"bytes,7,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Gender    uint32   `protobuf:"varint,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Avatar    string   `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UpdateUserReq) Reset()         { *m = UpdateUserReq{} }
func (m *UpdateUserReq) String() string { return proto.CompactTextString(m) }
func (*UpdateUserReq) ProtoMessage()    {}
func (*UpdateUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}
func (m *UpdateUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserReq.Merge(m, src)
}
func (m *UpdateUserReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserReq proto.InternalMessageInfo

func (m *UpdateUserReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateUserReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateUserReq) GetUserFname() string {
	if m != nil {
		return m.UserFname
	}
	return ""
}

func (m *UpdateUserReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UpdateUserReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateUserReq) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_UserType_Omit
}

func (m *UpdateUserReq) GetSchoolId() string {
	if m != nil {
		return m.SchoolId
	}
	return ""
}

func (m *UpdateUserReq) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UpdateUserReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type DeleteUserReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *DeleteUserReq) Reset()         { *m = DeleteUserReq{} }
func (m *DeleteUserReq) String() string { return proto.CompactTextString(m) }
func (*DeleteUserReq) ProtoMessage()    {}
func (*DeleteUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}
func (m *DeleteUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserReq.Merge(m, src)
}
func (m *DeleteUserReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserReq proto.InternalMessageInfo

func (m *DeleteUserReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type RegisterReq struct {
	Mobile   string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Code     string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	SchoolId string `protobuf:"bytes,4,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{6}
}
func (m *RegisterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReq.Merge(m, src)
}
func (m *RegisterReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReq proto.InternalMessageInfo

func (m *RegisterReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *RegisterReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RegisterReq) GetSchoolId() string {
	if m != nil {
		return m.SchoolId
	}
	return ""
}

type SendCodeReq struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
}

func (m *SendCodeReq) Reset()         { *m = SendCodeReq{} }
func (m *SendCodeReq) String() string { return proto.CompactTextString(m) }
func (*SendCodeReq) ProtoMessage()    {}
func (*SendCodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{7}
}
func (m *SendCodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendCodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendCodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendCodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendCodeReq.Merge(m, src)
}
func (m *SendCodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SendCodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendCodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendCodeReq proto.InternalMessageInfo

func (m *SendCodeReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type UserLoginSummaryReq struct {
	PageNumber int64 `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize   int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *UserLoginSummaryReq) Reset()         { *m = UserLoginSummaryReq{} }
func (m *UserLoginSummaryReq) String() string { return proto.CompactTextString(m) }
func (*UserLoginSummaryReq) ProtoMessage()    {}
func (*UserLoginSummaryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{8}
}
func (m *UserLoginSummaryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginSummaryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginSummaryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginSummaryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginSummaryReq.Merge(m, src)
}
func (m *UserLoginSummaryReq) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginSummaryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginSummaryReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginSummaryReq proto.InternalMessageInfo

func (m *UserLoginSummaryReq) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *UserLoginSummaryReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type UserLoginSummaryResp struct {
	Summary    *UserLoginSummary           `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary" bson:"summary"`
	UserList   []*UserLoginSummaryRespUser `protobuf:"bytes,2,rep,name=userList,proto3" json:"user_list" bson:"user_list"`
	TotalPages int64                       `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	PageNumber int64                       `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	TotalRows  int64                       `protobuf:"varint,5,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (m *UserLoginSummaryResp) Reset()         { *m = UserLoginSummaryResp{} }
func (m *UserLoginSummaryResp) String() string { return proto.CompactTextString(m) }
func (*UserLoginSummaryResp) ProtoMessage()    {}
func (*UserLoginSummaryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{9}
}
func (m *UserLoginSummaryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginSummaryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginSummaryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginSummaryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginSummaryResp.Merge(m, src)
}
func (m *UserLoginSummaryResp) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginSummaryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginSummaryResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginSummaryResp proto.InternalMessageInfo

func (m *UserLoginSummaryResp) GetSummary() *UserLoginSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *UserLoginSummaryResp) GetUserList() []*UserLoginSummaryRespUser {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *UserLoginSummaryResp) GetTotalPages() int64 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *UserLoginSummaryResp) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *UserLoginSummaryResp) GetTotalRows() int64 {
	if m != nil {
		return m.TotalRows
	}
	return 0
}

type UserLoginSummaryRespUser struct {
	RoleName         string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name" bson:"role_name"`
	Mobile           string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile" bson:"mobile"`
	LastLogin        int64  `protobuf:"varint,3,opt,name=last_login,json=lastLogin,proto3" json:"last_login" bson:"last_login"`
	LoginTimes       int64  `protobuf:"varint,4,opt,name=login_times,json=loginTimes,proto3" json:"login_times" bson:"login_times"`
	LoginDurationMin int64  `protobuf:"varint,5,opt,name=login_duration_min,json=loginDurationMin,proto3" json:"login_duration_min" bson:"login_duration_min"`
}

func (m *UserLoginSummaryRespUser) Reset()         { *m = UserLoginSummaryRespUser{} }
func (m *UserLoginSummaryRespUser) String() string { return proto.CompactTextString(m) }
func (*UserLoginSummaryRespUser) ProtoMessage()    {}
func (*UserLoginSummaryRespUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{9, 0}
}
func (m *UserLoginSummaryRespUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginSummaryRespUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginSummaryRespUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginSummaryRespUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginSummaryRespUser.Merge(m, src)
}
func (m *UserLoginSummaryRespUser) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginSummaryRespUser) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginSummaryRespUser.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginSummaryRespUser proto.InternalMessageInfo

func (m *UserLoginSummaryRespUser) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UserLoginSummaryRespUser) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserLoginSummaryRespUser) GetLastLogin() int64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *UserLoginSummaryRespUser) GetLoginTimes() int64 {
	if m != nil {
		return m.LoginTimes
	}
	return 0
}

func (m *UserLoginSummaryRespUser) GetLoginDurationMin() int64 {
	if m != nil {
		return m.LoginDurationMin
	}
	return 0
}

type UserListReq struct {
	UserFname  string `protobuf:"bytes,1,opt,name=user_fname,json=userFname,proto3" json:"user_fname,omitempty"`
	Mobile     string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	PageNumber int64  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize   int64  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *UserListReq) Reset()         { *m = UserListReq{} }
func (m *UserListReq) String() string { return proto.CompactTextString(m) }
func (*UserListReq) ProtoMessage()    {}
func (*UserListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{10}
}
func (m *UserListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserListReq.Merge(m, src)
}
func (m *UserListReq) XXX_Size() int {
	return m.Size()
}
func (m *UserListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserListReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserListReq proto.InternalMessageInfo

func (m *UserListReq) GetUserFname() string {
	if m != nil {
		return m.UserFname
	}
	return ""
}

func (m *UserListReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserListReq) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *UserListReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type UserList struct {
	Users      []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	TotalPages int64   `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	PageNumber int64   `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	TotalRows  int64   `protobuf:"varint,4,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{11}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return m.Size()
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserList) GetTotalPages() int64 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *UserList) GetPageNumber() int64 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *UserList) GetTotalRows() int64 {
	if m != nil {
		return m.TotalRows
	}
	return 0
}

type UserSwitchReq struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TurnOn bool   `protobuf:"varint,2,opt,name=turn_on,json=turnOn,proto3" json:"turn_on,omitempty"`
}

func (m *UserSwitchReq) Reset()         { *m = UserSwitchReq{} }
func (m *UserSwitchReq) String() string { return proto.CompactTextString(m) }
func (*UserSwitchReq) ProtoMessage()    {}
func (*UserSwitchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{12}
}
func (m *UserSwitchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSwitchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSwitchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSwitchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSwitchReq.Merge(m, src)
}
func (m *UserSwitchReq) XXX_Size() int {
	return m.Size()
}
func (m *UserSwitchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSwitchReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserSwitchReq proto.InternalMessageInfo

func (m *UserSwitchReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserSwitchReq) GetTurnOn() bool {
	if m != nil {
		return m.TurnOn
	}
	return false
}

type ClientConfig struct {
	Msaa       uint32 `protobuf:"varint,1,opt,name=msaa,proto3" json:"msaa" bson:"msaa"`
	Detail     uint32 `protobuf:"varint,2,opt,name=detail,proto3" json:"detail" bson:"detail"`
	MouthShape uint32 `protobuf:"varint,3,opt,name=mouth_shape,json=mouthShape,proto3" json:"mouth_shape" bson:"mouth_shape"`
	Gesture    uint32 `protobuf:"varint,4,opt,name=gesture,proto3" json:"gesture" bson:"gesture"`
	Microphone uint32 `protobuf:"varint,5,opt,name=microphone,proto3" json:"microphone" bson:"microphone"`
	Voice      uint32 `protobuf:"varint,6,opt,name=voice,proto3" json:"voice" bson:"voice"`
	Subtitle   uint32 `protobuf:"varint,7,opt,name=subtitle,proto3" json:"subtitle" bson:"subtitle"`
	Volume     uint32 `protobuf:"varint,8,opt,name=volume,proto3" json:"volume" bson:"volume"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{13}
}
func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return m.Size()
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetMsaa() uint32 {
	if m != nil {
		return m.Msaa
	}
	return 0
}

func (m *ClientConfig) GetDetail() uint32 {
	if m != nil {
		return m.Detail
	}
	return 0
}

func (m *ClientConfig) GetMouthShape() uint32 {
	if m != nil {
		return m.MouthShape
	}
	return 0
}

func (m *ClientConfig) GetGesture() uint32 {
	if m != nil {
		return m.Gesture
	}
	return 0
}

func (m *ClientConfig) GetMicrophone() uint32 {
	if m != nil {
		return m.Microphone
	}
	return 0
}

func (m *ClientConfig) GetVoice() uint32 {
	if m != nil {
		return m.Voice
	}
	return 0
}

func (m *ClientConfig) GetSubtitle() uint32 {
	if m != nil {
		return m.Subtitle
	}
	return 0
}

func (m *ClientConfig) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type ClientConfigReq struct {
	UserId       string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ClientConfig *ClientConfig `protobuf:"bytes,2,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
}

func (m *ClientConfigReq) Reset()         { *m = ClientConfigReq{} }
func (m *ClientConfigReq) String() string { return proto.CompactTextString(m) }
func (*ClientConfigReq) ProtoMessage()    {}
func (*ClientConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{14}
}
func (m *ClientConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfigReq.Merge(m, src)
}
func (m *ClientConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ClientConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfigReq proto.InternalMessageInfo

func (m *ClientConfigReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ClientConfigReq) GetClientConfig() *ClientConfig {
	if m != nil {
		return m.ClientConfig
	}
	return nil
}

type User struct {
	Id               string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id,omitempty"`
	UserName         string        `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name" bson:"user_name"`
	UserFname        string        `protobuf:"bytes,3,opt,name=user_fname,json=userFname,proto3" json:"user_fname" bson:"user_fname"`
	Gender           uint32        `protobuf:"varint,4,opt,name=gender,proto3" json:"gender" bson:"gender"`
	IdCard           string        `protobuf:"bytes,5,opt,name=id_card,json=idCard,proto3" json:"id_card" bson:"id_card"`
	Avatar           string        `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar" bson:"avatar"`
	UserType         UserType      `protobuf:"varint,7,opt,name=user_type,json=userType,proto3,enum=pbs.UserType" json:"user_type" bson:"user_type"`
	Password         string        `protobuf:"bytes,8,opt,name=password,proto3" json:"password" bson:"password"`
	Email            string        `protobuf:"bytes,9,opt,name=email,proto3" json:"email" bson:"email"`
	Mobile           string        `protobuf:"bytes,10,opt,name=mobile,proto3" json:"mobile" bson:"mobile"`
	Token            string        `protobuf:"bytes,11,opt,name=token,proto3" json:"token" bson:"token"`
	Status           uint32        `protobuf:"varint,12,opt,name=status,proto3" json:"status" bson:"status"`
	UpdatedAt        int64         `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	DeletedAt        int64         `protobuf:"varint,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at" bson:"deleted_at"`
	CreatedAt        int64         `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	LastLogin        int64         `protobuf:"varint,16,opt,name=last_login,json=lastLogin,proto3" json:"last_login" bson:"last_login"`
	UserSignature    string        `protobuf:"bytes,17,opt,name=user_signature,json=userSignature,proto3" json:"user_signature" bson:"user_signature"`
	Roles            []*Role       `protobuf:"bytes,18,rep,name=Roles,proto3" json:"roles" bson:"roles"`
	UserModel        uint32        `protobuf:"varint,19,opt,name=user_model,json=userModel,proto3" json:"user_model" bson:"user_model"`
	LoginTimes       int64         `protobuf:"varint,20,opt,name=login_times,json=loginTimes,proto3" json:"login_times" bson:"login_times"`
	LoginDurationMin int64         `protobuf:"varint,21,opt,name=login_duration_min,json=loginDurationMin,proto3" json:"login_duration_min" bson:"login_duration_min"`
	LastLogoutTime   int64         `protobuf:"varint,22,opt,name=last_logout_time,json=lastLogoutTime,proto3" json:"last_logout_time" bson:"last_logout_time"`
	SchoolInfo       *School       `protobuf:"bytes,23,opt,name=school_info,json=schoolInfo,proto3" json:"school_info" bson:"school_info"`
	BannedToPost     bool          `protobuf:"varint,24,opt,name=banned_to_post,json=bannedToPost,proto3" json:"banned_to_post" bson:"banned_to_post"`
	ClientConfig     *ClientConfig `protobuf:"bytes,25,opt,name=client_config,json=clientConfig,proto3" json:"client_config" bson:"client_config"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{15}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetUserFname() string {
	if m != nil {
		return m.UserFname
	}
	return ""
}

func (m *User) GetGender() uint32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *User) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_UserType_Omit
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *User) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *User) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *User) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *User) GetLastLogin() int64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *User) GetUserSignature() string {
	if m != nil {
		return m.UserSignature
	}
	return ""
}

func (m *User) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetUserModel() uint32 {
	if m != nil {
		return m.UserModel
	}
	return 0
}

func (m *User) GetLoginTimes() int64 {
	if m != nil {
		return m.LoginTimes
	}
	return 0
}

func (m *User) GetLoginDurationMin() int64 {
	if m != nil {
		return m.LoginDurationMin
	}
	return 0
}

func (m *User) GetLastLogoutTime() int64 {
	if m != nil {
		return m.LastLogoutTime
	}
	return 0
}

func (m *User) GetSchoolInfo() *School {
	if m != nil {
		return m.SchoolInfo
	}
	return nil
}

func (m *User) GetBannedToPost() bool {
	if m != nil {
		return m.BannedToPost
	}
	return false
}

func (m *User) GetClientConfig() *ClientConfig {
	if m != nil {
		return m.ClientConfig
	}
	return nil
}

// 用户信息汇总表
type UserLoginSummary struct {
	LoginUserTotalCount uint32 `protobuf:"varint,1,opt,name=login_user_total_count,json=loginUserTotalCount,proto3" json:"login_user_total_count" bson:"login_user_total_count"`
	LoginTotalCount     uint32 `protobuf:"varint,2,opt,name=login_total_count,json=loginTotalCount,proto3" json:"login_total_count" bson:"login_total_count"`
	LoginTotalDuration  uint64 `protobuf:"varint,3,opt,name=login_total_duration,json=loginTotalDuration,proto3" json:"login_total_duration" bson:"login_total_duration"`
	CreatedAt           int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	UpdatedAt           int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	SchoolId            string `protobuf:"bytes,6,opt,name=school_id,json=schoolId,proto3" json:"school_id" bson:"school_id"`
}

func (m *UserLoginSummary) Reset()         { *m = UserLoginSummary{} }
func (m *UserLoginSummary) String() string { return proto.CompactTextString(m) }
func (*UserLoginSummary) ProtoMessage()    {}
func (*UserLoginSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{16}
}
func (m *UserLoginSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginSummary.Merge(m, src)
}
func (m *UserLoginSummary) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginSummary.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginSummary proto.InternalMessageInfo

func (m *UserLoginSummary) GetLoginUserTotalCount() uint32 {
	if m != nil {
		return m.LoginUserTotalCount
	}
	return 0
}

func (m *UserLoginSummary) GetLoginTotalCount() uint32 {
	if m != nil {
		return m.LoginTotalCount
	}
	return 0
}

func (m *UserLoginSummary) GetLoginTotalDuration() uint64 {
	if m != nil {
		return m.LoginTotalDuration
	}
	return 0
}

func (m *UserLoginSummary) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UserLoginSummary) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *UserLoginSummary) GetSchoolId() string {
	if m != nil {
		return m.SchoolId
	}
	return ""
}

func init() {
	proto.RegisterEnum("pbs.UserType", UserType_name, UserType_value)
	proto.RegisterType((*LoginUser)(nil), "pbs.LoginUser")
	proto.RegisterType((*LogoutReq)(nil), "pbs.LogoutReq")
	proto.RegisterType((*CodeResp)(nil), "pbs.CodeResp")
	proto.RegisterType((*CreateUserReq)(nil), "pbs.CreateUserReq")
	proto.RegisterType((*UpdateUserReq)(nil), "pbs.UpdateUserReq")
	proto.RegisterType((*DeleteUserReq)(nil), "pbs.DeleteUserReq")
	proto.RegisterType((*RegisterReq)(nil), "pbs.RegisterReq")
	proto.RegisterType((*SendCodeReq)(nil), "pbs.SendCodeReq")
	proto.RegisterType((*UserLoginSummaryReq)(nil), "pbs.UserLoginSummaryReq")
	proto.RegisterType((*UserLoginSummaryResp)(nil), "pbs.UserLoginSummaryResp")
	proto.RegisterType((*UserLoginSummaryRespUser)(nil), "pbs.UserLoginSummaryResp.user")
	proto.RegisterType((*UserListReq)(nil), "pbs.UserListReq")
	proto.RegisterType((*UserList)(nil), "pbs.UserList")
	proto.RegisterType((*UserSwitchReq)(nil), "pbs.UserSwitchReq")
	proto.RegisterType((*ClientConfig)(nil), "pbs.ClientConfig")
	proto.RegisterType((*ClientConfigReq)(nil), "pbs.ClientConfigReq")
	proto.RegisterType((*User)(nil), "pbs.User")
	proto.RegisterType((*UserLoginSummary)(nil), "pbs.UserLoginSummary")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 1968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x6f, 0xdc, 0xc8,
	0xd1, 0xd6, 0x7c, 0x6a, 0xa6, 0x46, 0x94, 0x46, 0x6d, 0xd9, 0xa2, 0xe5, 0xd7, 0xa2, 0xdf, 0x8e,
	0x8d, 0x68, 0xed, 0x40, 0x46, 0x24, 0x60, 0x17, 0x58, 0x03, 0x06, 0x3c, 0x72, 0x6c, 0x2c, 0xb0,
	0xf6, 0x2a, 0x3d, 0x36, 0x90, 0x1c, 0x16, 0x03, 0x6a, 0xd8, 0x96, 0x88, 0x0c, 0xd9, 0xb3, 0x64,
	0x8f, 0x0d, 0xed, 0x31, 0xe7, 0x1c, 0x12, 0x04, 0x08, 0x72, 0xcc, 0x35, 0xff, 0x64, 0x8f, 0x7b,
	0x4c, 0x2e, 0x44, 0x60, 0xdf, 0xe6, 0x38, 0xbf, 0x20, 0xe8, 0x2e, 0x92, 0x4d, 0x52, 0x1e, 0x69,
	0x63, 0xec, 0x8d, 0xf5, 0x74, 0xb1, 0xaa, 0xbb, 0xea, 0xe9, 0xea, 0xea, 0x06, 0x98, 0xc5, 0x3c,
	0xda, 0x9f, 0x46, 0x42, 0x0a, 0xd2, 0x98, 0x9e, 0xc4, 0x3b, 0x6b, 0x63, 0x11, 0x04, 0x22, 0x44,
	0x68, 0x07, 0x22, 0x31, 0xe1, 0xe9, 0xf7, 0x5a, 0x3c, 0x3e, 0x13, 0x62, 0x82, 0x12, 0xfd, 0x1d,
	0x74, 0xbf, 0x16, 0xa7, 0x7e, 0xf8, 0x3a, 0xe6, 0x11, 0xb9, 0x05, 0x5d, 0x65, 0x67, 0x14, 0xba,
	0x01, 0xb7, 0x6b, 0x77, 0x6a, 0x7b, 0x5d, 0xd6, 0x51, 0xc0, 0x4b, 0x37, 0xe0, 0x64, 0x07, 0x3a,
	0x53, 0x37, 0x8e, 0xdf, 0x89, 0xc8, 0xb3, 0xeb, 0x38, 0x96, 0xc9, 0x84, 0x40, 0x73, 0x2c, 0x3c,
	0x6e, 0x37, 0x34, 0xae, 0xbf, 0xe9, 0x5d, 0x6d, 0x59, 0xcc, 0x24, 0xe3, 0xdf, 0x91, 0x6d, 0x58,
	0xd5, 0x96, 0x7d, 0x2f, 0xb5, 0xdb, 0x56, 0xe2, 0x57, 0x1e, 0xdd, 0x87, 0xce, 0x91, 0xf0, 0x38,
	0xe3, 0xf1, 0x94, 0xac, 0x43, 0x3d, 0x1f, 0xaf, 0xfb, 0xc6, 0x6a, 0xbd, 0x60, 0xf5, 0x87, 0x1a,
	0x58, 0x47, 0x11, 0x77, 0x25, 0x57, 0x33, 0x56, 0xa6, 0x2f, 0x9d, 0xf4, 0x6d, 0x8c, 0xcc, 0xe8,
	0x8d, 0x1e, 0x45, 0x43, 0x5a, 0xfd, 0x99, 0x02, 0xc8, 0x0d, 0x68, 0x07, 0xe2, 0xc4, 0x9f, 0x64,
	0x33, 0x4f, 0xa5, 0xd2, 0x5a, 0x9b, 0x95, 0xb5, 0xde, 0x4f, 0xfd, 0xc9, 0xf3, 0x29, 0xb7, 0x5b,
	0x77, 0x6a, 0x7b, 0xeb, 0x07, 0xd6, 0xfe, 0xf4, 0x24, 0xde, 0x57, 0x13, 0x7a, 0x75, 0x3e, 0xe5,
	0xe8, 0x5e, 0x7d, 0xa9, 0xb9, 0x61, 0xb4, 0xd5, 0xc2, 0xdb, 0x68, 0x08, 0x81, 0xaf, 0x3c, 0xfa,
	0x97, 0x3a, 0x58, 0xaf, 0xa7, 0x5e, 0x61, 0x29, 0xcb, 0xa2, 0x54, 0x5e, 0x63, 0xfd, 0xd2, 0x35,
	0x36, 0x96, 0xaf, 0xb1, 0xb9, 0x74, 0x8d, 0xad, 0xcb, 0xd6, 0xd8, 0xfe, 0x1f, 0xd6, 0xb8, 0x5a,
	0x5e, 0xa3, 0x72, 0x7e, 0xca, 0x43, 0x8f, 0x47, 0x76, 0xe7, 0x4e, 0x6d, 0xcf, 0x62, 0xa9, 0xa4,
	0x70, 0xf7, 0xad, 0x2b, 0xdd, 0xc8, 0xee, 0xe2, 0xa4, 0x50, 0xa2, 0x7b, 0x60, 0x3d, 0xe5, 0x13,
	0x7e, 0x75, 0x48, 0x68, 0x04, 0x3d, 0xc6, 0x4f, 0xfd, 0x58, 0xa2, 0x9e, 0x59, 0x65, 0x6d, 0xe9,
	0x2a, 0x7f, 0x02, 0x6b, 0xcb, 0xab, 0x69, 0x56, 0x32, 0x76, 0x0f, 0x7a, 0x43, 0x1e, 0x7a, 0x48,
	0xd8, 0xa5, 0x3e, 0xe9, 0x10, 0xae, 0xa9, 0xe9, 0xeb, 0x7d, 0x35, 0x9c, 0x05, 0x81, 0x1b, 0x9d,
	0x2b, 0x75, 0x07, 0x7a, 0x53, 0xf7, 0x94, 0x8f, 0xc2, 0x59, 0x70, 0xc2, 0x23, 0xfd, 0x4f, 0x83,
	0x81, 0x82, 0x5e, 0x6a, 0x44, 0xf9, 0xd6, 0x0a, 0xb1, 0xff, 0x3d, 0x66, 0xb9, 0xa1, 0x26, 0x7b,
	0xca, 0x87, 0xfe, 0xf7, 0x9c, 0xfe, 0xb5, 0x05, 0x5b, 0x17, 0xad, 0xc6, 0x53, 0xf2, 0x12, 0x56,
	0x63, 0x14, 0xb5, 0xc9, 0xde, 0xc1, 0xf5, 0x3c, 0x53, 0x45, 0xdd, 0xc1, 0xed, 0x79, 0xe2, 0x64,
	0x9a, 0x8b, 0xc4, 0x59, 0x3f, 0x89, 0x45, 0xf8, 0x25, 0x4d, 0x01, 0xca, 0xb2, 0x21, 0xf2, 0x2d,
	0xe8, 0xdc, 0x7e, 0xed, 0xc7, 0xd2, 0xae, 0xdf, 0x69, 0xec, 0xf5, 0x0e, 0x76, 0x3f, 0x6a, 0x50,
	0x39, 0xdf, 0x57, 0x9a, 0x83, 0xff, 0x9f, 0x27, 0x0e, 0xf2, 0x65, 0xe2, 0xc7, 0x72, 0x91, 0x38,
	0x7d, 0xb4, 0x9d, 0x43, 0x94, 0xe5, 0x26, 0x55, 0x14, 0xa4, 0x90, 0xee, 0x64, 0xa4, 0x56, 0x16,
	0xeb, 0xd8, 0x37, 0x18, 0x68, 0xe8, 0x58, 0x21, 0xd5, 0x30, 0x35, 0x2f, 0x84, 0xe9, 0x36, 0xa0,
	0xfa, 0x28, 0x12, 0xef, 0x62, 0x4d, 0xdd, 0x06, 0xeb, 0x6a, 0x84, 0x89, 0x77, 0xf1, 0xce, 0xbc,
	0x0e, 0x4d, 0xe5, 0x8d, 0x3c, 0x86, 0xae, 0x2a, 0x7b, 0x85, 0xc2, 0x80, 0x33, 0xcd, 0x41, 0x33,
	0xd3, 0x1c, 0xa2, 0xac, 0xa3, 0xbe, 0xf5, 0xbe, 0x3a, 0xcc, 0xd3, 0xab, 0x89, 0x33, 0xb8, 0x35,
	0x4f, 0x9c, 0x14, 0x59, 0x24, 0x8e, 0x85, 0x7f, 0xa6, 0x29, 0xcf, 0xf9, 0x36, 0x00, 0x98, 0xb8,
	0xb1, 0x1c, 0x4d, 0x54, 0xa4, 0x70, 0x75, 0x83, 0x5f, 0xcc, 0x13, 0xa7, 0x80, 0x2e, 0x12, 0x67,
	0x13, 0x7f, 0x36, 0x18, 0x65, 0x5d, 0x25, 0xe8, 0xf8, 0x92, 0x67, 0xd0, 0xd3, 0xe0, 0x48, 0xfa,
	0x01, 0x8f, 0x31, 0x02, 0x83, 0x7b, 0xf3, 0xc4, 0x29, 0xc2, 0x8b, 0xc4, 0x21, 0xa9, 0x15, 0x03,
	0x52, 0x06, 0x5a, 0x7a, 0xa5, 0x04, 0xe2, 0x02, 0xc1, 0x31, 0x6f, 0x16, 0xb9, 0xd2, 0x17, 0xe1,
	0x28, 0xf0, 0x43, 0x0c, 0xd8, 0xe0, 0x70, 0x9e, 0x38, 0x1f, 0x19, 0x5d, 0x24, 0xce, 0xcd, 0xa2,
	0xd5, 0xe2, 0x18, 0x65, 0x7d, 0x0d, 0x3e, 0x4d, 0xb1, 0x17, 0x7e, 0x48, 0xff, 0x58, 0x83, 0xde,
	0xeb, 0x34, 0xb5, 0x8a, 0xe3, 0xe5, 0x5a, 0x54, 0x5b, 0x5e, 0x8b, 0xea, 0xa5, 0x5d, 0x5a, 0xc9,
	0x79, 0xe3, 0xf2, 0xad, 0xd1, 0xac, 0x6c, 0x8d, 0x3f, 0xd5, 0xa0, 0xf3, 0xda, 0xf0, 0xab, 0xa5,
	0xfc, 0xc5, 0x76, 0x4d, 0x73, 0xb7, 0x9b, 0x73, 0x97, 0x21, 0x5e, 0x25, 0x60, 0xfd, 0x2a, 0x02,
	0x36, 0xae, 0x20, 0x60, 0xb3, 0x42, 0x40, 0xfa, 0x04, 0x2c, 0xe5, 0x6f, 0xf8, 0xce, 0x97, 0xe3,
	0xb3, 0x4b, 0xcb, 0xfa, 0x36, 0xac, 0xca, 0x59, 0x14, 0x8e, 0x44, 0xa8, 0xa7, 0xd1, 0x61, 0x6d,
	0x25, 0x7e, 0x13, 0xd2, 0x7f, 0x37, 0x60, 0xed, 0x68, 0xe2, 0xf3, 0x50, 0x1e, 0x89, 0xf0, 0x8d,
	0x7f, 0x4a, 0x1e, 0x40, 0x33, 0x88, 0x5d, 0x57, 0xff, 0x6f, 0x0d, 0xb6, 0xe7, 0x89, 0xa3, 0xe5,
	0x45, 0xe2, 0xf4, 0x52, 0x1e, 0xc6, 0xae, 0x4b, 0x99, 0x06, 0x15, 0x71, 0x3d, 0x2e, 0x5d, 0x7f,
	0xa2, 0xad, 0x5a, 0x48, 0x5c, 0x44, 0x0c, 0x71, 0x51, 0xa6, 0x2c, 0x1d, 0x50, 0xa4, 0x0b, 0xc4,
	0x4c, 0x9e, 0x8d, 0xe2, 0x33, 0x77, 0x8a, 0x35, 0xd1, 0x42, 0xd2, 0x15, 0x60, 0x43, 0xba, 0x02,
	0x48, 0x19, 0x68, 0x69, 0xa8, 0x04, 0xf2, 0x05, 0xac, 0x9e, 0xf2, 0x58, 0xce, 0x22, 0xcc, 0x93,
	0x85, 0x75, 0x27, 0x85, 0x4c, 0xdd, 0x49, 0x01, 0xca, 0xb2, 0x21, 0x72, 0x04, 0x10, 0xf8, 0xe3,
	0x48, 0x4c, 0xcf, 0x44, 0x88, 0x07, 0xab, 0x85, 0x3b, 0xc7, 0xa0, 0x66, 0xe7, 0x18, 0x4c, 0x79,
	0xcf, 0x05, 0xf2, 0x10, 0x5a, 0x6f, 0x85, 0x3f, 0xc6, 0x43, 0xcb, 0x1a, 0xdc, 0x9c, 0x27, 0x0e,
	0x02, 0x8b, 0xc4, 0x59, 0xc3, 0x5f, 0xb5, 0x48, 0x19, 0xc2, 0xe4, 0x11, 0x74, 0xe2, 0xd9, 0x89,
	0xf4, 0xe5, 0x84, 0xeb, 0xc3, 0xcb, 0x1a, 0x38, 0xf3, 0xc4, 0xc9, 0xb1, 0x45, 0xe2, 0x6c, 0x64,
	0x85, 0x12, 0x11, 0xca, 0xf2, 0x41, 0x15, 0xe8, 0xb7, 0x62, 0x32, 0x0b, 0x38, 0x9e, 0x6e, 0x18,
	0x68, 0x44, 0x4c, 0xa0, 0x51, 0xa6, 0x2c, 0x1d, 0xa0, 0x27, 0xb0, 0x51, 0x4c, 0xed, 0xa5, 0x04,
	0xf9, 0x1c, 0xac, 0xb1, 0xd6, 0x1d, 0x8d, 0xb5, 0xb2, 0x4e, 0x68, 0xef, 0x60, 0x53, 0x93, 0xba,
	0x64, 0x65, 0x6d, 0x5c, 0x90, 0xe8, 0x3f, 0x2d, 0x68, 0xea, 0x8e, 0x6e, 0xdf, 0xb4, 0x54, 0x83,
	0xdd, 0x79, 0xe2, 0xd4, 0x7d, 0x6f, 0x91, 0x38, 0x5b, 0x38, 0xb3, 0x91, 0xef, 0xfd, 0x4a, 0x04,
	0xbe, 0xe4, 0xc1, 0x54, 0x9e, 0x53, 0xdd, 0x72, 0x3d, 0xbe, 0xd0, 0x68, 0x14, 0xaa, 0x7b, 0xb9,
	0x66, 0xe6, 0x10, 0x2d, 0xf4, 0x22, 0x83, 0x8b, 0xbd, 0x08, 0x26, 0xd1, 0xa0, 0x26, 0x89, 0x06,
	0xa3, 0xc5, 0x22, 0x71, 0x98, 0xf7, 0x0c, 0x4d, 0x13, 0x55, 0x44, 0x4c, 0x54, 0x51, 0xa6, 0x79,
	0x43, 0xf1, 0x39, 0xac, 0xfa, 0xde, 0x68, 0xec, 0x66, 0xcd, 0x0c, 0xd2, 0x2e, 0x85, 0x0c, 0xed,
	0x52, 0x80, 0xb2, 0xb6, 0xef, 0x1d, 0xb9, 0x91, 0xa7, 0x9c, 0xa5, 0x8d, 0x48, 0xdb, 0x14, 0x79,
	0x44, 0x8c, 0xb3, 0xb4, 0x39, 0xc9, 0xba, 0x14, 0xf2, 0xa2, 0xd8, 0x1e, 0xad, 0x7e, 0xa4, 0x3d,
	0x2a, 0x04, 0x4d, 0xe9, 0x54, 0x82, 0xa6, 0x20, 0x5a, 0xe8, 0xa0, 0x1e, 0x15, 0x7a, 0x94, 0x8e,
	0x9e, 0x85, 0xe6, 0x60, 0x86, 0x19, 0x0e, 0x66, 0x08, 0x2d, 0x34, 0x31, 0x0f, 0xa1, 0xc5, 0x03,
	0xb5, 0xd7, 0x75, 0x23, 0x85, 0x8c, 0xd7, 0x80, 0x61, 0xbc, 0x16, 0x29, 0x43, 0xb8, 0x70, 0xac,
	0xc1, 0x4f, 0x3f, 0xd6, 0x1e, 0x42, 0x4b, 0x8a, 0x3f, 0xf0, 0xd0, 0xee, 0x19, 0x2f, 0x1a, 0x30,
	0x5e, 0xb4, 0x48, 0x19, 0xc2, 0xca, 0x4b, 0x2c, 0x5d, 0x39, 0x8b, 0xed, 0x35, 0x93, 0x44, 0x44,
	0x8c, 0x17, 0x94, 0x29, 0x4b, 0x07, 0x34, 0x7b, 0x74, 0x43, 0xec, 0x8d, 0x5c, 0x69, 0x5b, 0xe6,
	0xf0, 0x34, 0x68, 0x81, 0x3d, 0x39, 0xa6, 0xd8, 0x83, 0xc2, 0x13, 0xa9, 0x6c, 0x78, 0xba, 0x83,
	0xd4, 0x36, 0xd6, 0x8d, 0x0d, 0x83, 0x1a, 0x1b, 0x06, 0xa3, 0xac, 0x9b, 0x0a, 0x68, 0x63, 0xac,
	0xef, 0x18, 0xda, 0xc6, 0x86, 0xb1, 0x61, 0x50, 0x63, 0xc3, 0x60, 0x94, 0x75, 0x53, 0x01, 0x6d,
	0x14, 0x1a, 0x81, 0xfe, 0x27, 0x35, 0x02, 0x0c, 0xd6, 0x35, 0x61, 0x62, 0xff, 0x34, 0x74, 0x75,
	0x49, 0xdd, 0xd4, 0xe1, 0x7f, 0x30, 0x4f, 0x9c, 0xca, 0xc8, 0x22, 0x71, 0xae, 0x17, 0x28, 0x96,
	0xe3, 0x94, 0x59, 0x0a, 0x18, 0x66, 0x32, 0xf9, 0x12, 0x5a, 0x4c, 0x4c, 0x78, 0x6c, 0x93, 0xc2,
	0xf9, 0xa8, 0x10, 0x4c, 0xaa, 0xea, 0x7e, 0x62, 0x93, 0x54, 0x2d, 0x52, 0x86, 0xbf, 0xe4, 0xbb,
	0x3b, 0x10, 0x1e, 0x9f, 0xd8, 0xd7, 0x4c, 0x89, 0x36, 0x68, 0x65, 0x77, 0x6b, 0x2c, 0xdd, 0xdd,
	0x2f, 0xd4, 0x77, 0xb5, 0xb9, 0xd9, 0xfa, 0x79, 0x9b, 0x9b, 0xeb, 0x3f, 0x63, 0x73, 0x43, 0x7e,
	0x0f, 0xfd, 0x2c, 0x31, 0x62, 0x26, 0xf5, 0x24, 0xec, 0x1b, 0xda, 0xc1, 0xc3, 0x79, 0xe2, 0x5c,
	0x18, 0x5b, 0x24, 0xce, 0x76, 0x39, 0x9d, 0xd9, 0x08, 0x65, 0xeb, 0x69, 0x52, 0xc5, 0x4c, 0xaa,
	0xe9, 0x93, 0x21, 0xf4, 0xb2, 0x6b, 0x46, 0xf8, 0x46, 0xd8, 0xdb, 0xba, 0xac, 0xf7, 0x74, 0x2e,
	0x86, 0x1a, 0xc7, 0x90, 0x14, 0x74, 0x4c, 0x48, 0x0a, 0x20, 0x65, 0x90, 0x5e, 0x4e, 0xc2, 0x37,
	0x82, 0xfc, 0x16, 0xd6, 0x4f, 0xdc, 0x30, 0xe4, 0xde, 0x48, 0x8a, 0xd1, 0x54, 0xc4, 0xd2, 0xb6,
	0x55, 0x57, 0x81, 0x74, 0x29, 0x8f, 0x18, 0xba, 0x94, 0x71, 0xca, 0xd6, 0x10, 0x78, 0x25, 0x8e,
	0x45, 0x2c, 0x89, 0x5b, 0x3d, 0x80, 0x6e, 0x2e, 0x39, 0x80, 0x06, 0x9f, 0xcd, 0x13, 0xa7, 0xac,
	0x6b, 0x0e, 0x9a, 0x12, 0x4c, 0x2b, 0x67, 0xd5, 0xdf, 0x9a, 0xd0, 0xaf, 0xde, 0x2d, 0xc8, 0x14,
	0x6e, 0x60, 0x8e, 0xb0, 0x60, 0xea, 0x6e, 0x6b, 0x2c, 0x66, 0xa1, 0x4c, 0x3b, 0xa0, 0x47, 0xf3,
	0xc4, 0x59, 0xa2, 0xb1, 0x48, 0x9c, 0xdb, 0xc5, 0x2c, 0x57, 0xc7, 0x29, 0xbb, 0x36, 0xc9, 0x5e,
	0x3c, 0x5e, 0x29, 0xf8, 0x48, 0xa1, 0xe4, 0x5b, 0xd8, 0x4c, 0xb9, 0x56, 0x70, 0x86, 0xfd, 0xd3,
	0xaf, 0xe7, 0x89, 0x73, 0x71, 0x70, 0x91, 0x38, 0x76, 0x89, 0xa3, 0x45, 0x17, 0x1b, 0xc8, 0x54,
	0x63, 0xde, 0x87, 0xad, 0xa2, 0x5a, 0x46, 0x3d, 0x7d, 0x44, 0x36, 0x07, 0x5f, 0xcc, 0x13, 0xe7,
	0xa3, 0xe3, 0x8b, 0xc4, 0xb9, 0x75, 0xd1, 0x49, 0x36, 0x4a, 0x19, 0x31, 0x7e, 0x32, 0xe6, 0x56,
	0xaa, 0x57, 0xf3, 0x53, 0xab, 0x57, 0xa1, 0x12, 0xb7, 0x3e, 0xa9, 0x12, 0x3f, 0xbe, 0xf0, 0xf8,
	0x81, 0xc7, 0x62, 0x0e, 0x9a, 0x63, 0x31, 0x87, 0xa8, 0xb9, 0x6d, 0xdf, 0x7f, 0x8a, 0x5d, 0xbd,
	0x3e, 0x22, 0x37, 0xb1, 0xa7, 0x56, 0xdf, 0xa3, 0x6f, 0x02, 0x5f, 0xf6, 0x57, 0x08, 0x40, 0x3b,
	0x14, 0x41, 0xe4, 0x4e, 0xfa, 0x35, 0xd2, 0x85, 0x96, 0xeb, 0x05, 0x7e, 0xd8, 0xaf, 0x93, 0x75,
	0x80, 0x78, 0x36, 0xe5, 0xd1, 0x13, 0x2d, 0x37, 0x0e, 0xfe, 0xd1, 0xc2, 0x1b, 0xca, 0x90, 0x47,
	0x6f, 0x55, 0xc3, 0x47, 0xa1, 0x85, 0xc5, 0x75, 0x5d, 0x73, 0x38, 0x7f, 0xfc, 0xda, 0x31, 0x37,
	0x05, 0xf2, 0x4b, 0x00, 0xfd, 0xfb, 0x95, 0x8a, 0x77, 0xa1, 0x8d, 0x9b, 0xda, 0x28, 0xe1, 0x83,
	0xd7, 0x0e, 0x68, 0xf9, 0x37, 0xaa, 0xb3, 0x22, 0x77, 0x61, 0xf5, 0x39, 0x97, 0x47, 0xc2, 0xe3,
	0xa4, 0x00, 0xef, 0x60, 0xcb, 0x90, 0xbf, 0x7e, 0xed, 0x41, 0x1b, 0x1f, 0xb6, 0x08, 0xc1, 0x81,
	0xe2, 0x2b, 0x57, 0xc9, 0xde, 0x1e, 0xb4, 0xf1, 0xdd, 0x28, 0xd5, 0x2c, 0x3d, 0x22, 0x55, 0x35,
	0xf1, 0x39, 0x25, 0xd5, 0x2c, 0xbd, 0xad, 0x54, 0x34, 0x3b, 0xd9, 0x73, 0x0a, 0xe9, 0xe3, 0x99,
	0x60, 0x5e, 0x57, 0xaa, 0x9a, 0xd9, 0x23, 0x48, 0xaa, 0x59, 0x78, 0x13, 0x29, 0x69, 0x3e, 0x83,
	0x8d, 0xe7, 0x5c, 0x96, 0xf6, 0xb5, 0xbd, 0xe4, 0x29, 0xe1, 0xbb, 0x9d, 0x9b, 0x4b, 0x1f, 0x19,
	0xc8, 0x7d, 0x1d, 0x3f, 0x7d, 0xbb, 0xeb, 0x1b, 0x2d, 0xbc, 0x71, 0xee, 0x58, 0x25, 0x84, 0x7c,
	0x06, 0xfd, 0xe7, 0x5c, 0xbe, 0x38, 0x7f, 0x32, 0xd6, 0x3b, 0x51, 0xd7, 0xc5, 0x62, 0xd0, 0x0b,
	0xc9, 0x7b, 0x00, 0xdd, 0x81, 0x1b, 0xa6, 0x85, 0x8e, 0xe4, 0x78, 0x7e, 0x6f, 0x2b, 0xad, 0xe5,
	0x1e, 0x34, 0x06, 0x6e, 0x78, 0xa5, 0xda, 0x61, 0xd6, 0xdc, 0x0f, 0xcf, 0xe3, 0xf4, 0xea, 0xb6,
	0x75, 0xb1, 0x59, 0x2f, 0xff, 0x34, 0xf8, 0xbf, 0x1f, 0xde, 0xef, 0xd6, 0x7e, 0x7c, 0xbf, 0x5b,
	0xfb, 0xcf, 0xfb, 0xdd, 0xda, 0x9f, 0x3f, 0xec, 0xae, 0xfc, 0xfd, 0xc3, 0xee, 0xca, 0x8f, 0x1f,
	0x76, 0x57, 0xfe, 0xf5, 0x61, 0x77, 0xe5, 0x78, 0xe5, 0xb8, 0x76, 0x5c, 0x3f, 0x69, 0xeb, 0xe7,
	0xda, 0xc3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x60, 0x49, 0xa5, 0xe9, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error)
	AdminLogin(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*Empty, error)
	GetCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodeResp, error)
	Create(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error)
	SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*Empty, error)
	GetLoginSummary(ctx context.Context, in *UserLoginSummaryReq, opts ...grpc.CallOption) (*UserLoginSummaryResp, error)
	GetList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserList, error)
	GetMyAccountInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	BanToPost(ctx context.Context, in *UserSwitchReq, opts ...grpc.CallOption) (*Empty, error)
	Ban(ctx context.Context, in *UserSwitchReq, opts ...grpc.CallOption) (*Empty, error)
	ClientSysConfig(ctx context.Context, in *ClientConfigReq, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminLogin(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pbs.UserService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodeResp, error) {
	out := new(CodeResp)
	err := c.cc.Invoke(ctx, "/pbs.UserService/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Create(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoginSummary(ctx context.Context, in *UserLoginSummaryReq, opts ...grpc.CallOption) (*UserLoginSummaryResp, error) {
	out := new(UserLoginSummaryResp)
	err := c.cc.Invoke(ctx, "/pbs.UserService/GetLoginSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/pbs.UserService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMyAccountInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pbs.UserService/GetMyAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BanToPost(ctx context.Context, in *UserSwitchReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/BanToPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Ban(ctx context.Context, in *UserSwitchReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ClientSysConfig(ctx context.Context, in *ClientConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.UserService/ClientSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	Login(context.Context, *LoginUser) (*User, error)
	AdminLogin(context.Context, *LoginUser) (*User, error)
	Logout(context.Context, *LogoutReq) (*Empty, error)
	GetCode(context.Context, *Empty) (*CodeResp, error)
	Create(context.Context, *CreateUserReq) (*Empty, error)
	Update(context.Context, *UpdateUserReq) (*Empty, error)
	Delete(context.Context, *DeleteUserReq) (*Empty, error)
	Register(context.Context, *RegisterReq) (*Empty, error)
	SendCode(context.Context, *SendCodeReq) (*Empty, error)
	GetLoginSummary(context.Context, *UserLoginSummaryReq) (*UserLoginSummaryResp, error)
	GetList(context.Context, *UserListReq) (*UserList, error)
	GetMyAccountInfo(context.Context, *Empty) (*User, error)
	BanToPost(context.Context, *UserSwitchReq) (*Empty, error)
	Ban(context.Context, *UserSwitchReq) (*Empty, error)
	ClientSysConfig(context.Context, *ClientConfigReq) (*Empty, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Login(ctx context.Context, req *LoginUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserServiceServer) AdminLogin(ctx context.Context, req *LoginUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (*UnimplementedUserServiceServer) Logout(ctx context.Context, req *LogoutReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedUserServiceServer) GetCode(ctx context.Context, req *Empty) (*CodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (*UnimplementedUserServiceServer) Create(ctx context.Context, req *CreateUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserServiceServer) Update(ctx context.Context, req *UpdateUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserServiceServer) Delete(ctx context.Context, req *DeleteUserReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedUserServiceServer) Register(ctx context.Context, req *RegisterReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedUserServiceServer) SendCode(ctx context.Context, req *SendCodeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (*UnimplementedUserServiceServer) GetLoginSummary(ctx context.Context, req *UserLoginSummaryReq) (*UserLoginSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginSummary not implemented")
}
func (*UnimplementedUserServiceServer) GetList(ctx context.Context, req *UserListReq) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (*UnimplementedUserServiceServer) GetMyAccountInfo(ctx context.Context, req *Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyAccountInfo not implemented")
}
func (*UnimplementedUserServiceServer) BanToPost(ctx context.Context, req *UserSwitchReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanToPost not implemented")
}
func (*UnimplementedUserServiceServer) Ban(ctx context.Context, req *UserSwitchReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedUserServiceServer) ClientSysConfig(ctx context.Context, req *ClientConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSysConfig not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminLogin(ctx, req.(*LoginUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoginSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoginSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/GetLoginSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoginSummary(ctx, req.(*UserLoginSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMyAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMyAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/GetMyAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMyAccountInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BanToPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BanToPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/BanToPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BanToPost(ctx, req.(*UserSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Ban(ctx, req.(*UserSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ClientSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ClientSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.UserService/ClientSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ClientSysConfig(ctx, req.(*ClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _UserService_AdminLogin_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _UserService_GetCode_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _UserService_SendCode_Handler,
		},
		{
			MethodName: "GetLoginSummary",
			Handler:    _UserService_GetLoginSummary_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UserService_GetList_Handler,
		},
		{
			MethodName: "GetMyAccountInfo",
			Handler:    _UserService_GetMyAccountInfo_Handler,
		},
		{
			MethodName: "BanToPost",
			Handler:    _UserService_BanToPost_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _UserService_Ban_Handler,
		},
		{
			MethodName: "ClientSysConfig",
			Handler:    _UserService_ClientSysConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func (m *LoginUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogoutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchoolId) > 0 {
		i -= len(m.SchoolId)
		copy(dAtA[i:], m.SchoolId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SchoolId)))
		i--
		dAtA[i] = 0x32
	}
	if m.UserType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserFname) > 0 {
		i -= len(m.UserFname)
		copy(dAtA[i:], m.UserFname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserFname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Gender != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SchoolId) > 0 {
		i -= len(m.SchoolId)
		copy(dAtA[i:], m.SchoolId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SchoolId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UserType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserFname) > 0 {
		i -= len(m.UserFname)
		copy(dAtA[i:], m.UserFname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserFname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchoolId) > 0 {
		i -= len(m.SchoolId)
		copy(dAtA[i:], m.SchoolId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SchoolId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendCodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLoginSummaryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginSummaryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginSummaryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageNumber != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserLoginSummaryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginSummaryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginSummaryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalRows != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalRows))
		i--
		dAtA[i] = 0x28
	}
	if m.PageNumber != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalPages != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalPages))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Summary != nil {
		{
			size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLoginSummaryRespUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginSummaryRespUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginSummaryRespUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoginDurationMin != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginDurationMin))
		i--
		dAtA[i] = 0x28
	}
	if m.LoginTimes != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginTimes))
		i--
		dAtA[i] = 0x20
	}
	if m.LastLogin != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LastLogin))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.PageNumber != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserFname) > 0 {
		i -= len(m.UserFname)
		copy(dAtA[i:], m.UserFname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserFname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalRows != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalRows))
		i--
		dAtA[i] = 0x20
	}
	if m.PageNumber != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalPages != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalPages))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserSwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSwitchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSwitchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TurnOn {
		i--
		if m.TurnOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Volume))
		i--
		dAtA[i] = 0x40
	}
	if m.Subtitle != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Subtitle))
		i--
		dAtA[i] = 0x38
	}
	if m.Voice != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Voice))
		i--
		dAtA[i] = 0x30
	}
	if m.Microphone != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Microphone))
		i--
		dAtA[i] = 0x28
	}
	if m.Gesture != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gesture))
		i--
		dAtA[i] = 0x20
	}
	if m.MouthShape != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MouthShape))
		i--
		dAtA[i] = 0x18
	}
	if m.Detail != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Detail))
		i--
		dAtA[i] = 0x10
	}
	if m.Msaa != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Msaa))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientConfig != nil {
		{
			size, err := m.ClientConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientConfig != nil {
		{
			size, err := m.ClientConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.BannedToPost {
		i--
		if m.BannedToPost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.SchoolInfo != nil {
		{
			size, err := m.SchoolInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.LastLogoutTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LastLogoutTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.LoginDurationMin != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginDurationMin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.LoginTimes != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginTimes))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.UserModel != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserModel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.UserSignature) > 0 {
		i -= len(m.UserSignature)
		copy(dAtA[i:], m.UserSignature)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserSignature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LastLogin != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LastLogin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CreatedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x78
	}
	if m.DeletedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x42
	}
	if m.UserType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IdCard) > 0 {
		i -= len(m.IdCard)
		copy(dAtA[i:], m.IdCard)
		i = encodeVarintUser(dAtA, i, uint64(len(m.IdCard)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Gender != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserFname) > 0 {
		i -= len(m.UserFname)
		copy(dAtA[i:], m.UserFname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserFname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserLoginSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchoolId) > 0 {
		i -= len(m.SchoolId)
		copy(dAtA[i:], m.SchoolId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SchoolId)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.LoginTotalDuration != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginTotalDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginTotalCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginTotalCount))
		i--
		dAtA[i] = 0x10
	}
	if m.LoginUserTotalCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginUserTotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *LogoutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *CodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *CreateUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserFname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovUser(uint64(m.UserType))
	}
	l = len(m.SchoolId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UpdateUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserFname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovUser(uint64(m.UserType))
	}
	l = len(m.SchoolId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *DeleteUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *RegisterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.SchoolId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *SendCodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserLoginSummaryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageNumber != 0 {
		n += 1 + sovUser(uint64(m.PageNumber))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *UserLoginSummaryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.TotalPages != 0 {
		n += 1 + sovUser(uint64(m.TotalPages))
	}
	if m.PageNumber != 0 {
		n += 1 + sovUser(uint64(m.PageNumber))
	}
	if m.TotalRows != 0 {
		n += 1 + sovUser(uint64(m.TotalRows))
	}
	return n
}

func (m *UserLoginSummaryRespUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.LastLogin != 0 {
		n += 1 + sovUser(uint64(m.LastLogin))
	}
	if m.LoginTimes != 0 {
		n += 1 + sovUser(uint64(m.LoginTimes))
	}
	if m.LoginDurationMin != 0 {
		n += 1 + sovUser(uint64(m.LoginDurationMin))
	}
	return n
}

func (m *UserListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserFname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.PageNumber != 0 {
		n += 1 + sovUser(uint64(m.PageNumber))
	}
	if m.PageSize != 0 {
		n += 1 + sovUser(uint64(m.PageSize))
	}
	return n
}

func (m *UserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.TotalPages != 0 {
		n += 1 + sovUser(uint64(m.TotalPages))
	}
	if m.PageNumber != 0 {
		n += 1 + sovUser(uint64(m.PageNumber))
	}
	if m.TotalRows != 0 {
		n += 1 + sovUser(uint64(m.TotalRows))
	}
	return n
}

func (m *UserSwitchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.TurnOn {
		n += 2
	}
	return n
}

func (m *ClientConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msaa != 0 {
		n += 1 + sovUser(uint64(m.Msaa))
	}
	if m.Detail != 0 {
		n += 1 + sovUser(uint64(m.Detail))
	}
	if m.MouthShape != 0 {
		n += 1 + sovUser(uint64(m.MouthShape))
	}
	if m.Gesture != 0 {
		n += 1 + sovUser(uint64(m.Gesture))
	}
	if m.Microphone != 0 {
		n += 1 + sovUser(uint64(m.Microphone))
	}
	if m.Voice != 0 {
		n += 1 + sovUser(uint64(m.Voice))
	}
	if m.Subtitle != 0 {
		n += 1 + sovUser(uint64(m.Subtitle))
	}
	if m.Volume != 0 {
		n += 1 + sovUser(uint64(m.Volume))
	}
	return n
}

func (m *ClientConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ClientConfig != nil {
		l = m.ClientConfig.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserFname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovUser(uint64(m.Gender))
	}
	l = len(m.IdCard)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovUser(uint64(m.UserType))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovUser(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovUser(uint64(m.DeletedAt))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovUser(uint64(m.CreatedAt))
	}
	if m.LastLogin != 0 {
		n += 2 + sovUser(uint64(m.LastLogin))
	}
	l = len(m.UserSignature)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 2 + l + sovUser(uint64(l))
		}
	}
	if m.UserModel != 0 {
		n += 2 + sovUser(uint64(m.UserModel))
	}
	if m.LoginTimes != 0 {
		n += 2 + sovUser(uint64(m.LoginTimes))
	}
	if m.LoginDurationMin != 0 {
		n += 2 + sovUser(uint64(m.LoginDurationMin))
	}
	if m.LastLogoutTime != 0 {
		n += 2 + sovUser(uint64(m.LastLogoutTime))
	}
	if m.SchoolInfo != nil {
		l = m.SchoolInfo.Size()
		n += 2 + l + sovUser(uint64(l))
	}
	if m.BannedToPost {
		n += 3
	}
	if m.ClientConfig != nil {
		l = m.ClientConfig.Size()
		n += 2 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserLoginSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginUserTotalCount != 0 {
		n += 1 + sovUser(uint64(m.LoginUserTotalCount))
	}
	if m.LoginTotalCount != 0 {
		n += 1 + sovUser(uint64(m.LoginTotalCount))
	}
	if m.LoginTotalDuration != 0 {
		n += 1 + sovUser(uint64(m.LoginTotalDuration))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovUser(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovUser(uint64(m.UpdatedAt))
	}
	l = len(m.SchoolId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginSummaryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginSummaryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginSummaryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginSummaryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginSummaryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginSummaryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Summary == nil {
				m.Summary = &UserLoginSummary{}
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &UserLoginSummaryRespUser{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPages", wireType)
			}
			m.TotalPages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRows", wireType)
			}
			m.TotalRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginSummaryRespUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: user: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: user: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogin", wireType)
			}
			m.LastLogin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTimes", wireType)
			}
			m.LoginTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginDurationMin", wireType)
			}
			m.LoginDurationMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginDurationMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPages", wireType)
			}
			m.TotalPages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRows", wireType)
			}
			m.TotalRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TurnOn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msaa", wireType)
			}
			m.Msaa = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msaa |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			m.Detail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Detail |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MouthShape", wireType)
			}
			m.MouthShape = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MouthShape |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gesture", wireType)
			}
			m.Gesture = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gesture |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Microphone", wireType)
			}
			m.Microphone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Microphone |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			m.Voice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Voice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			m.Subtitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subtitle |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			m.Volume = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volume |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientConfig == nil {
				m.ClientConfig = &ClientConfig{}
			}
			if err := m.ClientConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserFname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogin", wireType)
			}
			m.LastLogin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModel", wireType)
			}
			m.UserModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserModel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTimes", wireType)
			}
			m.LoginTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginDurationMin", wireType)
			}
			m.LoginDurationMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginDurationMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogoutTime", wireType)
			}
			m.LastLogoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogoutTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchoolInfo == nil {
				m.SchoolInfo = &School{}
			}
			if err := m.SchoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedToPost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BannedToPost = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientConfig == nil {
				m.ClientConfig = &ClientConfig{}
			}
			if err := m.ClientConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginUserTotalCount", wireType)
			}
			m.LoginUserTotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginUserTotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTotalCount", wireType)
			}
			m.LoginTotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTotalDuration", wireType)
			}
			m.LoginTotalDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTotalDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
