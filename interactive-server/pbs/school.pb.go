// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: school.proto

package pbs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 学校
type School struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name"`
	CreatedAt    int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	UpdatedAt    int64  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	DeletedAt    int64  `protobuf:"varint,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at" bson:"deleted_at"`
	ProvinceCode string `protobuf:"bytes,6,opt,name=province_code,json=provinceCode,proto3" json:"province_code" bson:"province_code"`
	CityCode     string `protobuf:"bytes,7,opt,name=city_code,json=cityCode,proto3" json:"city_code" bson:"city_code"`
}

func (m *School) Reset()         { *m = School{} }
func (m *School) String() string { return proto.CompactTextString(m) }
func (*School) ProtoMessage()    {}
func (*School) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdb068902851add0, []int{0}
}
func (m *School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_School.Merge(m, src)
}
func (m *School) XXX_Size() int {
	return m.Size()
}
func (m *School) XXX_DiscardUnknown() {
	xxx_messageInfo_School.DiscardUnknown(m)
}

var xxx_messageInfo_School proto.InternalMessageInfo

func (m *School) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *School) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *School) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *School) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *School) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *School) GetProvinceCode() string {
	if m != nil {
		return m.ProvinceCode
	}
	return ""
}

func (m *School) GetCityCode() string {
	if m != nil {
		return m.CityCode
	}
	return ""
}

func init() {
	proto.RegisterType((*School)(nil), "pbs.School")
}

func init() { proto.RegisterFile("school.proto", fileDescriptor_fdb068902851add0) }

var fileDescriptor_fdb068902851add0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4a, 0x03, 0x31,
	0x00, 0xc6, 0xef, 0x4f, 0xad, 0x5e, 0xac, 0xa0, 0x41, 0xf0, 0x10, 0x49, 0x6a, 0x5c, 0x2a, 0x4a,
	0x17, 0x37, 0x07, 0xa1, 0xe7, 0x2e, 0x12, 0x1f, 0xa0, 0xb4, 0x49, 0xc0, 0x40, 0xef, 0x72, 0xb4,
	0x51, 0xe8, 0x5b, 0x38, 0xfa, 0x3a, 0x6e, 0x8e, 0x1d, 0x9d, 0x82, 0xf4, 0xb6, 0x1b, 0xef, 0x09,
	0xe4, 0x72, 0x77, 0xc4, 0x6e, 0xf9, 0x7e, 0xc9, 0xf7, 0x1b, 0xbe, 0x80, 0xc1, 0x8a, 0xbd, 0x2a,
	0xb5, 0x18, 0xe7, 0x4b, 0xa5, 0x15, 0x0c, 0xf3, 0xf9, 0xea, 0x7c, 0xc0, 0x54, 0x9a, 0xaa, 0xac,
	0x41, 0xe4, 0x2b, 0x04, 0xfd, 0x17, 0xfb, 0x06, 0x8e, 0x41, 0x20, 0x79, 0xec, 0x0f, 0xfd, 0x51,
	0x94, 0xa0, 0xd2, 0xe0, 0x40, 0xf2, 0xca, 0xe0, 0xd3, 0xf9, 0x4a, 0x65, 0xf7, 0x64, 0x2a, 0xf9,
	0xad, 0x4a, 0xa5, 0x16, 0x69, 0xae, 0xd7, 0x84, 0x06, 0x92, 0xc3, 0x1b, 0xd0, 0xcb, 0x66, 0xa9,
	0x88, 0x03, 0xdb, 0x38, 0x2b, 0x0d, 0xb6, 0xb9, 0x32, 0xf8, 0xb0, 0xe9, 0xd4, 0x89, 0x50, 0x0b,
	0x61, 0x02, 0x00, 0x5b, 0x8a, 0x99, 0x16, 0x7c, 0x3a, 0xd3, 0x71, 0x38, 0xf4, 0x47, 0x61, 0x72,
	0x55, 0x1a, 0xfc, 0x8f, 0x56, 0x06, 0x9f, 0x34, 0x45, 0xc7, 0x08, 0x8d, 0xda, 0x30, 0xd1, 0xb5,
	0xe3, 0x2d, 0xe7, 0x9d, 0xa3, 0xe7, 0x1c, 0x8e, 0x3a, 0x87, 0x63, 0x84, 0x46, 0x6d, 0x68, 0x1c,
	0x5c, 0x2c, 0x44, 0xeb, 0xd8, 0x73, 0x0e, 0x47, 0x9d, 0xc3, 0x31, 0x42, 0xa3, 0x36, 0x4c, 0x34,
	0x7c, 0x02, 0x47, 0xf9, 0x52, 0xbd, 0xcb, 0x8c, 0x89, 0x29, 0x53, 0x5c, 0xc4, 0x7d, 0xbb, 0xc0,
	0x75, 0x69, 0xf0, 0xee, 0x85, 0x9b, 0x6f, 0x07, 0x13, 0x3a, 0xe8, 0xf2, 0xa3, 0xe2, 0x02, 0x3e,
	0x80, 0x88, 0x49, 0xbd, 0x6e, 0x5c, 0xfb, 0xd6, 0x75, 0x59, 0x1a, 0xec, 0x60, 0x65, 0xf0, 0x71,
	0xbb, 0x4c, 0x87, 0x08, 0x3d, 0xa8, 0xcf, 0x75, 0x3f, 0xb9, 0xf8, 0xde, 0x22, 0x7f, 0xb3, 0x45,
	0xfe, 0xef, 0x16, 0xf9, 0x1f, 0x05, 0xf2, 0x3e, 0x0b, 0xe4, 0x6d, 0x0a, 0xe4, 0xfd, 0x14, 0xc8,
	0x7b, 0xf6, 0xe6, 0x7d, 0xfb, 0xd5, 0x77, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xa5, 0x9f,
	0x8f, 0x0d, 0x02, 0x00, 0x00,
}

func (m *School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *School) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *School) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CityCode) > 0 {
		i -= len(m.CityCode)
		copy(dAtA[i:], m.CityCode)
		i = encodeVarintSchool(dAtA, i, uint64(len(m.CityCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProvinceCode) > 0 {
		i -= len(m.ProvinceCode)
		copy(dAtA[i:], m.ProvinceCode)
		i = encodeVarintSchool(dAtA, i, uint64(len(m.ProvinceCode)))
		i--
		dAtA[i] = 0x32
	}
	if m.DeletedAt != 0 {
		i = encodeVarintSchool(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintSchool(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != 0 {
		i = encodeVarintSchool(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchool(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSchool(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovSchool(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovSchool(uint64(m.DeletedAt))
	}
	l = len(m.ProvinceCode)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	l = len(m.CityCode)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	return n
}

func sovSchool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchool(x uint64) (n int) {
	return sovSchool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvinceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchool = fmt.Errorf("proto: unexpected end of group")
)
